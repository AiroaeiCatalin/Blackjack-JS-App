/* <!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>BlackJack App</title>
</head>
<body>


    <div id= "gameScreen" style="display: flex; flex-direction: column; align-items: center">

        <h3>Dealer Cards</h3>
        <div id="dealerScreen" style="width: 100%;
        min-height: 100px;
        margin-bottom:30px;
        border: 4px solid grey;
        display: flex;
        justify-content: center;
        max-width: 20rem;"></div>
        
        <h3>Your Cards</h3>
        <div id="playerScreen" style="width: 100%;
        min-height: 100px;
        border: 4px solid grey;
        display: flex;
        justify-content: center;
        max-width: 20rem;"></div>
       
       

        <div id="balance"> <h1>Balance: <span id="balanceScreen"></span></h1></div>
        <div id="endOfRoundMessage"></div>


        <br>
        <br>

        <div id="sitControls">
            <input id='sitValueField' type="text" placeholder="Enter Starting Balance Here..."/>
            <button id="sitButton">SIT</button>
        </div>

        
        <br>
        <br>

        <div id="dealControls">
            <select id="dealOption">
            </select>
            <button id="dealButton">DEAL</button>
        </div>

        
        <br>
        <br>

        <div id="turnControls">
            <button id="hitButton">HIT</button>
            <button id="stayButton">STAY</button>
        </div>

        <br>
        <br>

        <div id="endOfRoundControls">
            <button id="playAnotherRound">PLAY ANOTHER ROUND</button>
            <button id="standButton">STAND</button>
        </div>

    </div>

<!-- Code injected by live-server -->
<script type="text/javascript">
	// <![CDATA[  <-- For SVG support
	if ('WebSocket' in window) {
		(function () {
			function refreshCSS() {
				var sheets = [].slice.call(document.getElementsByTagName("link"));
				var head = document.getElementsByTagName("head")[0];
				for (var i = 0; i < sheets.length; ++i) {
					var elem = sheets[i];
					var parent = elem.parentElement || head;
					parent.removeChild(elem);
					var rel = elem.rel;
					if (elem.href && typeof rel != "string" || rel.length == 0 || rel.toLowerCase() == "stylesheet") {
						var url = elem.href.replace(/(&|\?)_cacheOverride=\d+/, '');
						elem.href = url + (url.indexOf('?') >= 0 ? '&' : '?') + '_cacheOverride=' + (new Date().valueOf());
					}
					parent.appendChild(elem);
				}
			}
			var protocol = window.location.protocol === 'http:' ? 'ws://' : 'wss://';
			var address = protocol + window.location.host + window.location.pathname + '/ws';
			var socket = new WebSocket(address);
			socket.onmessage = function (msg) {
				if (msg.data == 'reload') window.location.reload();
				else if (msg.data == 'refreshcss') refreshCSS();
			};
			if (sessionStorage && !sessionStorage.getItem('IsThisFirstTime_Log_From_LiveServer')) {
				console.log('Live reload enabled.');
				sessionStorage.setItem('IsThisFirstTime_Log_From_LiveServer', true);
			}
		})();
	}
	else {
		console.error('Upgrade your browser. This Browser is NOT supported WebSocket for Live-Reloading.');
	}
	// ]]>
</script></body>


    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.5.1/jquery.min.js"></script>

    <script>

        $( document ).ready(function() {
            console.log( "ready!" );

            let sitControls = $('#sitControls');
            let dealControls = $('#dealControls');
            let turnControls = $('#turnControls');
            let endOfRoundControls = $('#endOfRoundControls');
            let endOfRoundMessage = $('#endOfRoundMessage');
            let sitValueField = $('#sitValueField');
            let sitButton = $('#sitButton');
            let dealOption = $('#dealOption');
            let balanceScreen = $('#balanceScreen');
            let balance = $('#balance');
            let playerScreen = $('#playerScreen');
            let dealerScreen = $('#dealerScreen');
            let gameScreen = $('#gameScreen')


            // hide everything besides sit controls
            function hideNonSitControls() {
               dealControls.hide();
               turnControls.hide();
               endOfRoundControls.hide();
               balance.hide();
            }

            function showSitControls() {
                sitControls.show();
            }

            function hideSitControls() {
                sitControls.hide();
            }

            function hideDealControls() {
                dealControls.hide();
            }
            function showDealControls() {
                dealControls.show();
            }

            function showTurnControls() {
                turnControls.show();
            }

            function hideTurnControls() {
                turnControls.hide();
            }

            function hideEndOfRoundControls(){
                endOfRoundControls.hide();
            }

            function showEndOfRoundControls() {
                endOfRoundControls.show();
            }

            function appendPlayerCard(rank, suite) {
                playerScreen.append(rank + suite + '<br>');
            }

            function appendDealerCard(rank, suite) {
                dealerScreen.append(rank + suite + '<br>');
            }

            function cleanPlayerAndDealerScreens(){
                playerScreen.text('');
                dealerScreen.text('');
            }


            // vad daca nu se poate fara return
            function convertSuiteToSymbol(suite){
                switch (suite) {
                    case "Clubs":
                        return "♣";
                    case "Diamonds":
                        return "♢";
                    case "Hearts":
                        return "♡";
                    case "Spades":
                        return "♠";
                    
                }
                console.log(suite)
            }

            function setInitialBetOptions(betOptions){
                console.log(betOptions);
                $.each(betOptions, function( index, value ) {
                    $('#dealControls select').append(`<option>${value}</option>`);
                });
            }


            function setBetOptionsAfterRoundPlayed(){
                $('#dealControls select').text('');
                $.each(JSON.parse(localStorage.betOptions), function( index, value ) {
                    console.log(value < localStorage.balance)
                    if(value <= localStorage.balance){
                        $('#dealControls select').append(`<option>${value}</option>`);
                    }
                });
            }

            function changeBalance(newBalance) {
                localStorage.balance = newBalance;
                balanceScreen.text(localStorage.balance);

            }


            function displayEndOfRoundMessage(won) {
                if (won > 0) {
                    endOfRoundMessage.append("You have won " + won + " USD");
                } else {
                    endOfRoundMessage.append("You have lost " + Math.abs(won) + " USD");
                }
            }

            function endOfRoundHandler(data, status) {
                //Clean dealer screen
                dealerScreen.text('');
            
                $.each(data.dealerCards, function( index, value ) {
                    appendDealerCard(value.rank, convertSuiteToSymbol(value.suite));
                });

                hideTurnControls();
                // changeBalance(data.currentBalance);
                if(data.currentBalance === 0){
                    displayEndOfRoundMessage(parseInt(data.winAmount), data.currentBalance); //
                    showStandData();
                } else {
                    changeBalance(data.currentBalance);
                    showEndOfRoundControls();
                    displayEndOfRoundMessage(parseInt(data.winAmount), data.currentBalance);
                    setBetOptionsAfterRoundPlayed();
                }
            }


            function showStandData(){
                let playAgain = document.createElement("button");
                let roundsPlayed = document.createElement("p");
                // let btn = document.createElement("button");
                playAgain.innerHTML = "Play at another table";
                playAgain.onclick = function() {
                    playAgain.style.display = 'none'
                    endOfRoundMessage.hide();
                    balanceScreen.hide();
                    showSitControls();
                }
                hideEndOfRoundControls();
                gameScreen.append(playAgain);

            }



            function sit() {}
            function deal() {}
            function turn() {}
            function stand() {}
            function startGame() {hideNonSitControls();}



            sitButton.click(function() {
                    endOfRoundMessage.text('');
                    hideSitControls();
                    showDealControls();
                    cleanPlayerAndDealerScreens();
                    balance.show();
                    //saving balance into local storage
                    localStorage.balance = sitValueField.val() ;
                    balanceScreen.text(sitValueField.val())

                    $.post("https://blackjack.fuzz.me.uk/sit", {"balance": localStorage.balance}, function(data, status) {
                            //saving session id and bet options into storage
                            window.localStorage.blackjackSessionId = data.sessionId;
                            window.localStorage.betOptions = JSON.stringify(data.availableBetOptions);
                            setInitialBetOptions(data.availableBetOptions);
                        
                    }).fail(function(data) {
                        //displaying error message
                        playerScreen.append(JSON.parse(data.responseText).validation.body.message);
                        dealControls.hide();
                        balance.hide();
                        sitControls.show();
                    })
                
            })

            $('#dealButton').click(function() {
                console.log( dealOption.val() )
                hideDealControls();
                showTurnControls();
                

                $.post("https://blackjack.fuzz.me.uk/deal", {"bet": dealOption.val(), "sessionId": window.localStorage.blackjackSessionId}, function(data, status) {
                
                    //if round is not over
                    if(data.roundEnded === false) {
                        $.each(data.playerCards, function( index, value ) {
                            appendPlayerCard(value.rank, convertSuiteToSymbol(value.suite));
                        });

                        //dealer has only one card on DEAL stage (the other card is face down)
                        appendDealerCard(data.dealerCards[0].rank, convertSuiteToSymbol(data.dealerCards[0].suite));
                        
                    }
                    
                });
            })

            // on TURN
            $('#hitButton').click(function() {
                $.post("https://blackjack.fuzz.me.uk/turn", {"action": "hit","sessionId": window.localStorage.blackjackSessionId}, function(data, status) {
                    
                    appendPlayerCard(data.playerCard.rank, convertSuiteToSymbol(data.playerCard.suite));

                    // If round is not over
                    if(data.roundEnded === true) {
                        endOfRoundHandler(data, status);
                    }
                    
                    
                })
            })

            $('#stayButton').click(function() {
                
                $.post("https://blackjack.fuzz.me.uk/turn", {"action": "stay","sessionId": window.localStorage.blackjackSessionId}, function(data, status) {
                    endOfRoundHandler(data, status);
                })
            })

            $('#playAnotherRound').click(function(){
                endOfRoundMessage.text('');
                cleanPlayerAndDealerScreens();
                hideEndOfRoundControls();
                showDealControls();
            })

            $('#standButton').click(function(){
                showStandData();
            })


            startGame();

        });

    </script>








    $( document ).ready(function() {
    console.log( "ready!" );

    let sitControls = $('#sitControls');
    let dealControls = $('#dealControls');
    let turnControls = $('#turnControls');
    let endOfRoundControls = $('#endOfRoundControls');
    let endOfRoundMessage = $('#endOfRoundMessage');
    let sitValueField = $('#sitValueField');
    let dealOption = $('#dealOption');
    let balanceScreen = $('#balanceScreen');
    let balance = $('#balance');
    let playerScreen = $('#playerScreen');
    let dealerScreen = $('#dealerScreen');
    let gameContainer = $('#gameContainer')


    // hide everything besides sit controls
    function hideNonSitControls() {
       dealControls.hide();
       turnControls.hide();
       endOfRoundControls.hide();
       balance.hide();
    }

    function showSitControls() {
        sitControls.show();
    }

    function hideSitControls() {
        sitControls.hide();
    }

    function hideDealControls() {
        dealControls.hide();
    }
    function showDealControls() {
        dealControls.show();
    }

    function showTurnControls() {
        turnControls.show();
    }

    function hideTurnControls() {
        turnControls.hide();
    }

    function hideEndOfRoundControls(){
        endOfRoundControls.hide();
    }

    function showEndOfRoundControls() {
        endOfRoundControls.show();
    }

    function appendPlayerCard(rank, suite) {
        playerScreen.append(rank + suite + '<br>');
    }

    function appendDealerCard(rank, suite) {
        dealerScreen.append(rank + suite + '<br>');
    }

    function cleanPlayerAndDealerScreens(){
        playerScreen.text('');
        dealerScreen.text('');
    }

    
    function convertSuiteToSymbol(suite){
        switch (suite) {
            case "Clubs":
                return "♣";
            case "Diamonds":
                return "♢";
            case "Hearts":
                return "♡";
            case "Spades":
                return "♠";
            
        }
        console.log(suite)
    }

    function setInitialBetOptions(betOptions){
        $('#dealControls select').text('');
        $.each(betOptions, function( index, value ) {
            $('#dealControls select').append(`<option>${value}</option>`);
        });
    }


    function setBetOptionsAfterRoundPlayed(){
        $('#dealControls select').text('');
        $.each(JSON.parse(localStorage.betOptions), function( index, value ) {
            console.log(value < localStorage.balance)
            if(value <= localStorage.balance){
                $('#dealControls select').append(`<option>${value}</option>`);
            }
        });
    }

    function changeBalance(newBalance) {
        localStorage.balance = newBalance;
        balanceScreen.text(localStorage.balance);

    }


    function displayEndOfRoundMessage(won) {
        if (won > 0) {
            endOfRoundMessage.append("You have won " + won + " USD");
        } else {
            endOfRoundMessage.append("You have lost " + Math.abs(won) + " USD");
        }
    }

    function endOfRoundHandler(data, status) {
        //Clean dealer screen
        dealerScreen.text('');
    
        $.each(data.dealerCards, function( index, value ) {
            appendDealerCard(value.rank, convertSuiteToSymbol(value.suite));
        });

        hideTurnControls();
        // changeBalance(data.currentBalance);
        if(data.currentBalance === 0){
            displayEndOfRoundMessage(parseInt(data.winAmount), data.currentBalance); //
            stand();
        } else {
            changeBalance(data.currentBalance);
            showEndOfRoundControls();
            displayEndOfRoundMessage(parseInt(data.winAmount), data.currentBalance);
            setBetOptionsAfterRoundPlayed();
        }
    }

    function generateStandStats(roundsPlayed, winAmount,roundsPlayedElement, winAmountElement){
        console.log(roundsPlayed + " " + winAmount)
        roundsPlayedElement.innerText = "Rounds played: " + roundsPlayed;
        if(winAmount > 0){
            winAmountElement.innerText = `You have won: ${winAmount} USD`;
        } else if(winAmount < 0){
            winAmountElement.innerText = `You have lost: ${Math.abs(winAmount)} USD`;
        } else {
            winAmountElement.innerText = `You have the same amount of USD as you had when you entered`;
        }
        gameContainer.append(roundsPlayedElement);
        gameContainer.append(winAmountElement);
    }

    function generatePlayAtAnotherTableButton(roundsPlayed, winAmount){
        let playAtAnotherTable = document.createElement("button");
        playAtAnotherTable.innerHTML = "Play at another table";
        playAtAnotherTable.onclick = function() {
            playAtAnotherTable.style.display = 'none';
            roundsPlayed.style.display = 'none';
            winAmount.style.display = 'none';
            endOfRoundMessage.hide();
            balanceScreen.hide();
            showSitControls();
        }
        hideEndOfRoundControls();
        gameContainer.append(playAtAnotherTable);
    }

    function sit() {
        endOfRoundMessage.text('');
            hideSitControls();
            showDealControls();
            cleanPlayerAndDealerScreens();
            balance.show();
            //saving balance into local storage
            localStorage.balance = sitValueField.val();
            console.log(sitValueField.val());
            balanceScreen.text(sitValueField.val());

            $.post("https://blackjack.fuzz.me.uk/sit", {"balance": localStorage.balance}, function(data, status) {
                    //saving session id and bet options into storage
                    localStorage.blackjackSessionId = data.sessionId;
                    localStorage.betOptions = JSON.stringify(data.availableBetOptions);
                    setInitialBetOptions(data.availableBetOptions);
                
            }).fail(function(data) {
                //displaying error message
                playerScreen.append(JSON.parse(data.responseText).validation.body.message);
                dealControls.hide();
                balance.hide();
                sitControls.show();
            })
    }
    
    function deal() {
        console.log( dealOption.val() )
        hideDealControls();
        showTurnControls();
        

        $.post("https://blackjack.fuzz.me.uk/deal", {"bet": dealOption.val(), "sessionId": localStorage.blackjackSessionId}, function(data, status) {
        
            //if round is not over
            if(data.roundEnded === false) {
                $.each(data.playerCards, function( index, value ) {
                    appendPlayerCard(value.rank, convertSuiteToSymbol(value.suite));
                });

                //dealer has only one card on DEAL stage (the other card is face down)
                appendDealerCard(data.dealerCards[0].rank, convertSuiteToSymbol(data.dealerCards[0].suite));
                
            }
            
        });
    }

    function hit() {
        $.post("https://blackjack.fuzz.me.uk/turn", {"action": "hit","sessionId": localStorage.blackjackSessionId}, function(data, status) {
            
            appendPlayerCard(data.playerCard.rank, convertSuiteToSymbol(data.playerCard.suite));

            // If round is not over
            if(data.roundEnded === true) {
                endOfRoundHandler(data, status);
            }
            
            
        })
    }

    function stay() {            
        $.post("https://blackjack.fuzz.me.uk/turn", {"action": "stay","sessionId": localStorage.blackjackSessionId}, function(data, status) {
            endOfRoundHandler(data, status);
        })
    }

    function playAnotherRound(){
        endOfRoundMessage.text('');
        cleanPlayerAndDealerScreens();
        hideEndOfRoundControls();
        showDealControls();
    }

    function stand() {
        let roundsPlayed = document.createElement("p");
        let winAmount = document.createElement("p");
        $.post("https://blackjack.fuzz.me.uk/stand", {"sessionId": localStorage.blackjackSessionId}, function(data, status) {
            generateStandStats(data.roundsPlayed, data.winAmount, roundsPlayed, winAmount)
        }).done(function(){
            generatePlayAtAnotherTableButton(roundsPlayed, winAmount);
        })
    }

    function startGame() {hideNonSitControls();}


    //settings button functions
    $('#sitButton').click(function() {
        sit();
    })

    $('#dealButton').click(function() {
        deal();
    })

    $('#hitButton').click(function() {
        hit();
    })

    $('#stayButton').click(function() {
        stay();
    })

    $('#playAnotherRound').click(function(){
        playAnotherRound();
    })

    $('#standButton').click(function(){
        stand();
    })

    //starting the game
    startGame();

});
<!-- Code injected  */

#gameContainer{
    display: flex; 
    flex-direction: column; 
    align-items: center
}

#dealerScreen{
    width: 100%;
    min-height: 100px;
    margin-bottom:30px;
    border: 4px solid grey;
    display: flex;
    justify-content: center;
    max-width: 20rem;
}

#playerScreen{
    width: 100%;
    min-height: 100px;
    border: 4px solid grey;
    display: flex;
    justify-content: center;
    max-width: 20rem;
}